=== MICROSERVICES ARCHITECTURE PERFORMANCE REPORT ===
Generated: 2025-08-15 22:34:50

Test Configuration:
  Concurrent Users: 50
  Test Duration: 5 minutes
  Max Concurrent Jobs: 25
  Target Endpoint: /api/analytics/dashboard
  Base URL: http://localhost:8080
  Warmup Requests: 5

Request Statistics:
  Total Requests: 1340
  Successful Requests: 1340
  Failed Requests: 0
  Success Rate: 100%
  Throughput: 4.47 requests/second

Response Time Analysis:
  Average Response Time: 523.34ms
  Median Response Time: 484ms
  Minimum Response Time: 293ms
  Maximum Response Time: 2049ms

Response Time Percentiles:
  90th Percentile: 614ms
  95th Percentile: 742ms
  99th Percentile: 1751ms

Data Analysis:
  Average Response Data Size: 2069.01 bytes
  Performance Assessment:  [+] Good response time for microservices (< 1s)
  [+] Excellent reliability (> 95% success rate)

Architecture Notes:
  - This test represents microservices architecture performance
  - Data aggregation happens across multiple services via Feign clients
  - Inter-service communication adds latency overhead
  - Each service runs in separate containers with individual databases
  - JWT tokens propagated across service boundaries
  - Circuit breakers provide fault tolerance

Microservices Characteristics:
  - Analytics Service orchestrates calls to User, Book, and Transaction services
  - Each service has independent H2 database
  - Service discovery via Eureka
  - API Gateway routing adds routing overhead
  - Distributed tracing via Zipkin (if enabled)
  - Individual service scaling possible

Test Environment:
  - Spring Boot 3.3.0 microservices
  - Docker containerized deployment
  - H2 in-memory databases per service
  - JWT authentication with token propagation
  - Feign clients for inter-service communication

Memory Optimization Applied:
  - Job throttling with max 25 concurrent jobs
  - ArrayList for better memory management
  - Explicit garbage collection
  - Proper job cleanup and resource management

Comparison Baseline:
  - Compare these results with monolithic architecture
  - Expected higher latency due to network overhead
  - Better scalability and fault isolation
  - Distributed system complexity vs single deployment

Files Generated:
  - Detailed CSV results: analytics-microservices-load-test-results-20250815-223449.csv
  - Performance report: analytics-microservices-performance-report-20250815-223449.txt

=== END OF REPORT ===
